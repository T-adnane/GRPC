# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Bank_pb2 as bank__pb2


class BankServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.convert = channel.unary_unary(
                '/BankService/convert',
                request_serializer=bank__pb2.ConvertCurrencyRequest.SerializeToString,
                response_deserializer=bank__pb2.ConvertCurrencyResponse.FromString,
                )
        self.getCurrencyStream = channel.unary_stream(
                '/BankService/getCurrencyStream',
                request_serializer=bank__pb2.ConvertCurrencyRequest.SerializeToString,
                response_deserializer=bank__pb2.ConvertCurrencyResponse.FromString,
                )
        self.performStream = channel.stream_unary(
                '/BankService/performStream',
                request_serializer=bank__pb2.ConvertCurrencyRequest.SerializeToString,
                response_deserializer=bank__pb2.ConvertCurrencyResponse.FromString,
                )
        self.fullCurrencyStream = channel.stream_stream(
                '/BankService/fullCurrencyStream',
                request_serializer=bank__pb2.ConvertCurrencyRequest.SerializeToString,
                response_deserializer=bank__pb2.ConvertCurrencyResponse.FromString,
                )


class BankServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def convert(self, request, context):
        """unary model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrencyStream(self, request, context):
        """server streaming model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def performStream(self, request_iterator, context):
        """Client streaming model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fullCurrencyStream(self, request_iterator, context):
        """Bidirectional streaming model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BankServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'convert': grpc.unary_unary_rpc_method_handler(
                    servicer.convert,
                    request_deserializer=bank__pb2.ConvertCurrencyRequest.FromString,
                    response_serializer=bank__pb2.ConvertCurrencyResponse.SerializeToString,
            ),
            'getCurrencyStream': grpc.unary_stream_rpc_method_handler(
                    servicer.getCurrencyStream,
                    request_deserializer=bank__pb2.ConvertCurrencyRequest.FromString,
                    response_serializer=bank__pb2.ConvertCurrencyResponse.SerializeToString,
            ),
            'performStream': grpc.stream_unary_rpc_method_handler(
                    servicer.performStream,
                    request_deserializer=bank__pb2.ConvertCurrencyRequest.FromString,
                    response_serializer=bank__pb2.ConvertCurrencyResponse.SerializeToString,
            ),
            'fullCurrencyStream': grpc.stream_stream_rpc_method_handler(
                    servicer.fullCurrencyStream,
                    request_deserializer=bank__pb2.ConvertCurrencyRequest.FromString,
                    response_serializer=bank__pb2.ConvertCurrencyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BankService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BankService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def convert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BankService/convert',
            bank__pb2.ConvertCurrencyRequest.SerializeToString,
            bank__pb2.ConvertCurrencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCurrencyStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/BankService/getCurrencyStream',
            bank__pb2.ConvertCurrencyRequest.SerializeToString,
            bank__pb2.ConvertCurrencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def performStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/BankService/performStream',
            bank__pb2.ConvertCurrencyRequest.SerializeToString,
            bank__pb2.ConvertCurrencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fullCurrencyStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/BankService/fullCurrencyStream',
            bank__pb2.ConvertCurrencyRequest.SerializeToString,
            bank__pb2.ConvertCurrencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
